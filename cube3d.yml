
    int x, y;

    y = 0;
    while (y < game->map_h)
    {
        x = 0;
        while (x < game->map_w)
        {
            printf("%d", game->mmap[y][x]);
            x++;
        }
        y++;
        printf("\n");
    }


    // if (!check_top_bottom(board[0]))
    //     return (0);
    // if (!check_top_bottom(board[game->map_h - 1]))
    //     return (0);
    // if (!check_middle(game, board))
    //     return (0);
    

static int      check_top_bottom(char *board);
static int      check_middle(t_game *game, char **board);

static int  check_middle(t_game *game, char **board)
{
    int y;
    int len;

    y = -1;
    len = 0;
    while (board[++y])
    {
        len = ft_strlen(board[y]);
        if (board[y][0] != '1' || board[y][len - 1] != '1')
            return (0);
    }
    return (1);
}

static int  check_top_bottom(char *board)
{
    int i;

    i = -1;
    while (board[++i])
    {
        if (board[i] != '1')
            return (0);
    }
    return (1);
}


1111111111111111111111111
1000000000110000000000001
1011000001110000000000001
10010000000000000000000011
11111111111111111111111111
111111111011   100100011101
1111111111111111111111111111
10000000001100000111011111111111111111
10111111111111111110000010001
10000000000000011101010010001
10001000100000001100000010001
1001000000000000010000000001
100000N0000000001101010000001
11111111111101011111011100111
11110111111101011101111010001
1111111111111111111111111111




int	s;
	int	i;
	int	bit_per_pixel[2];
	int	line_size[2];
	int	endian[2];
	
	game->dir[0] = mlx_xpm_file_to_image(game->screen->mlx, path(game->north), &i, &i);
	game->dir[1] = mlx_xpm_file_to_image(game->screen->mlx, path(game->south), &i, &i);
	game->dir[2] = mlx_xpm_file_to_image(game->screen->mlx, path(game->west), &i, &i);
	game->dir[3] = mlx_xpm_file_to_image(game->screen->mlx, path(game->east), &i, &i);
	free(game->north);
	free(game->south);
	free(game->west);
	free(game->east);
	s = 0;
	while (s < 4)
	{
		if (!game->dir[s])
			failure();
		else
			game->addr[s] = mlx_get_data_addr(game->dir[s], game->bpp, game->line_len, game->endian);
		s++;
	}






if (keycode == 13) // W
	{
		game->player->pos.x += game->player->dir.x * 0.1;
		game->player->pos.y += game->player->dir.y * 0.1;
		// game->player->pos.y -= 0.1 * sin(game->player->cdir);
	}
	else if (keycode == 0) // A
	{
		game->player->pos.x += (game->player->dir.x * 0.1);
		game->player->pos.y -= (game->player->dir.y * 0.1);
		// game->player->pos.x -= game->player->dir.x * 0.1;
	}
	else if (keycode == 2) // D
	{
		// game->player->pos.x += game->player->dir.x * 0.1;
	}
	else if (keycode == 1) // S
	{
		game->player->pos.y += 0.1 * sin(game->player->cdir);
	}
	else if (keycode == 123) // L
	{
		game->player->angle = -5;
		game->player->angle = replace_angle_360(game->player->angle);
		game->player->cdir = degree_to_radian(game->player->angle);
		game->player->old_dir.x = game->player->dir.x;
		game->player->dir.x = game->player->dir.x * cos(0.050) - game->player->dir.y * sin(0.050);
		game->player->dir.y = game->player->old_dir.x * sin(0.050) + game->player->dir.y * cos(0.050);
		game->player->old_plane.x = game->player->plane.x;
		game->player->plane.x = game->player->plane.x * cos(0.050) - game->player->plane.y * sin(0.050);
		game->player->plane.y = game->player->old_plane.x * sin(0.050) + game->player->plane.y * cos(0.050);	
	}
	else if (keycode == 124) // R
	{
		game->player->angle += 5;
		game->player->angle = replace_angle_360(game->player->angle);
		game->player->cdir = degree_to_radian(game->player->angle);
		game->player->old_dir.x = game->player->dir.x;
		game->player->dir.x = game->player->dir.x * cos(-0.050) - game->player->dir.y * sin(-0.050);
		game->player->dir.y = game->player->old_dir.x * sin(-0.050) + game->player->dir.y * cos(-0.050);
		game->player->old_plane.x = game->player->plane.x;
		game->player->plane.x = game->player->plane.x * cos(-0.050) - game->player->plane.y * sin(-0.050);
		game->player->plane.y = game->player->old_plane.x * sin(-0.050) + game->player->plane.y * cos(-0.050);	
	}
	else if (keycode == 53)
		esc(keycode, game);












    int	update_loop(int k, t_game *game)
{
	
	if (k == 13)
		w(game);
	else if (k == 1)
		s(game);
	else if (k == 0)
		a(game);
	else if (k == 2)
		d(game);
	else if (k == 123 || k == 124)
		left_right(k, game);
	else if (k == 53)
		esc(k, game);
	draw(game);
	return (1);
}

int	esc(int keycode, t_game *game)
{
	if (keycode == 53)
	{
		mlx_destroy_window(game->screen->mlx, game->screen->win);
		exit(0);
	}
	return (1);
}

int	close_win(t_game *game)
{
	mlx_destroy_window(game->screen->mlx, game->screen->win);
	exit(0);
	return (0);
}